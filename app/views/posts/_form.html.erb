<style>
.whatever {
  border: 1px solid red
}
</style>

<%= form_for(@post) do |f| %>

  <p>
    <%= f.label :title %>
    <%= f.text_field :title %>
  </p>

  <p>
    <%= f.label :content %>
    <%= f.text_area :content %>
  </p>

  <% # How can I build a checkbox for each category %>
  <% # a bunch of checkboxes based on categories for the post's category_ids ??? %>
  <%= f.collection_check_boxes(:category_ids, Category.all, :id, :name) do |b| %>
    <p>
      <%= b.label :class => "whatever" %>
      <%= b.check_box %>
    </p>
  <% end %>

  <%
    # Will generate a checkbox named post[category_ids][] for each category in Category.all
    # it will use the :id as the value for the checkbox
    # and it will use the :name method as the label for the checkbox
  %>

   <!-- <%# Category.all.each do |c| %>
    <p>
      <label for="category_id_<%#= c.id %>"><%#= c.name %></label>
      <input type="checkbox" name="post[category_ids][]" value="<%#= c.id %>" id="category_id_<%#= c.id %>">
    </p>
  <%# end %> -->

  <%= f.fields_for :categories do |category_builder| %>
    <%= category_builder.text_field :name %>
  <% end %>

  <!--
    1. f is attached to the post.
    2. the fields_for method looks to see if the object (post) attached to f responds to
       a method called categories_attributes=
       3a. If the underlying object (post) does respond to that method, fields_for knows your
           building a nested form.
       3b. If the underlying object does not respond to that method, fields_for assumes you're doing
           something custom.

       <input type="text" name="post[categories][name]" id="post_categories_name">
  <!-- <input type="text" id="post_categories_attributes_0_name" name="post[categories_attributes][0][name]" />
  <input type="text" id="post_categories_attributes_1_name" name="post[categories_attributes][1][name]" /> -->

  <%= f.submit %>

<% end %>
